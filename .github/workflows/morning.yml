name: Morning TimeTree → LINE
on:
  schedule:
    - cron: "55 0 * * *"   # JST 09:55
    - cron: "57 0 * * *"   # JST 09:57
    - cron: "59 0 * * *"   # JST 09:59
    # JST 10:00 本命（UTC基準）および 10:10〜10:50 保険
    - cron: "0 1 * * *"     # JST 10:00 本命
    - cron: "10 1 * * *"    # 10:10 保険
    - cron: "20 1 * * *"    # 10:20 保険
    - cron: "30 1 * * *"    # 10:30 保険
    - cron: "40 1 * * *"    # 10:40 保険
    - cron: "50 1 * * *"    # 10:50 保険
  workflow_dispatch:
    inputs:
      test_message:
        description: "任意のテスト文言（指定時はICSを無視して送信）"
        required: false
        type: string
      dump:
        description: "ダンプ表示（送信せずICSの解析結果を出力）"
        required: false
        type: boolean

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      FAIL_NOTIFY: ${{ secrets.FAIL_NOTIFY }}
    steps:
      - uses: actions/checkout@v4

      - name: Show clocks (UTC/JST)
        id: clocks
        run: |
          echo "UTC : $(date -u '+%Y-%m-%d %H:%M:%S %Z')"
          echo "JST : $(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M:%S %Z')"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Compute JST date
        id: jst
        run: echo "date=$(TZ=Asia/Tokyo date +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      - name: Restore sent cache
        id: cache
        uses: actions/cache@v4
        with:
          path: .sent-marker
          key: sent-${{ steps.jst.outputs.date }}

      - name: Export TimeTree to ICS
        id: export
        if: ${{ steps.cache.outputs.cache-hit != 'true' || github.event.inputs.dump == 'true' || github.event.inputs.test_message != '' }}
        env:
          TIMETREE_EMAIL: ${{ secrets.TIMETREE_EMAIL }}
          TIMETREE_PASSWORD: ${{ secrets.TIMETREE_PASSWORD }}
          TIMETREE_CAL_CODE: ${{ secrets.TIMETREE_CAL_CODE }} # 任意
          FAIL_NOTIFY: ${{ secrets.FAIL_NOTIFY }}
        run: |
          mkdir -p data
          if [ -n "${TIMETREE_CAL_CODE}" ]; then
            timetree-exporter -o data/timetree.ics -e "${TIMETREE_EMAIL}" -c "${TIMETREE_CAL_CODE}" <<< "${TIMETREE_PASSWORD}"
          else
            timetree-exporter -o data/timetree.ics -e "${TIMETREE_EMAIL}" <<< "${TIMETREE_PASSWORD}"
          fi

      - name: Debug ICS head
        if: ${{ steps.cache.outputs.cache-hit != 'true' || github.event.inputs.dump == 'true' || github.event.inputs.test_message != '' }}
        run: |
          ls -l data || true
          head -n 40 data/timetree.ics || true

      - name: Send LINE message
        id: send
        env:
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_TO: ${{ secrets.LINE_TO }}
          USE_BROADCAST: ${{ secrets.USE_BROADCAST }}
          SHOW_MEMO: ${{ secrets.SHOW_MEMO }}
          SHOW_LINKS: ${{ secrets.SHOW_LINKS }}
          MEMO_MAX: ${{ secrets.MEMO_MAX }}
          SLEEP_MS: ${{ secrets.SLEEP_MS }}
          TEST_MESSAGE: ${{ github.event.inputs.test_message }}
          DUMP: ${{ github.event.inputs.dump }}
          FAIL_NOTIFY: ${{ secrets.FAIL_NOTIFY }}
          JST_DATE: ${{ steps.jst.outputs.date }}
        if: ${{ steps.cache.outputs.cache-hit != 'true' || github.event.inputs.dump == 'true' || github.event.inputs.test_message != '' }}
        run: |
          # If this is an actual scheduled send (not dump/test), wait until 10:00 JST strictly using JST epoch
          if [ "${DUMP}" != "true" ] && [ -z "${TEST_MESSAGE}" ]; then
            NOW_JST=$(TZ=Asia/Tokyo date +%s)
            TARGET_JST=$(TZ=Asia/Tokyo date -d "$(TZ=Asia/Tokyo date +%Y-%m-%d) 10:00" +%s)
            if [ "$NOW_JST" -lt "$TARGET_JST" ]; then
              echo "Sleep until JST 10:00..."; sleep $(( TARGET_JST - NOW_JST ));
            fi
          fi
          if [ "${DUMP}" = "true" ]; then
            echo "### TimeTree dump (先頭200行)" >> "$GITHUB_STEP_SUMMARY"
            python scripts/notify_today.py --dump | tee dump.csv
            head -n 200 dump.csv >> "$GITHUB_STEP_SUMMARY"
          elif [ -n "${TEST_MESSAGE}" ]; then
            python scripts/notify_today.py --test "${TEST_MESSAGE}"
          else
            python scripts/notify_today.py
          fi

      - name: Already sent today
        if: ${{ steps.cache.outputs.cache-hit == 'true' && github.event_name == 'schedule' }}
        run: echo "本日は既に送信済み（${{ steps.jst.outputs.date }}）。スキップします。"

      - name: Upload ICS artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: timetree-ics
          path: data/timetree.ics
          if-no-files-found: warn

      - name: Write sent marker
        if: ${{ success() && steps.cache.outputs.cache-hit != 'true' && github.event.inputs.dump != 'true' && github.event.inputs.test_message == '' }}
        env:
          JST_DATE: ${{ steps.jst.outputs.date }}
        run: echo "sent on ${JST_DATE}" > .sent-marker

      - name: Save sent cache
        if: ${{ success() && steps.cache.outputs.cache-hit != 'true' && github.event.inputs.dump != 'true' && github.event.inputs.test_message == '' }}
        uses: actions/cache@v4
        with:
          path: .sent-marker
          key: sent-${{ steps.jst.outputs.date }}

      - name: Cron audit (list all crons)
        if: always()
        run: |
          echo "### Cron audit" >> "$GITHUB_STEP_SUMMARY"
          python tools/list_crons.py | tee cron_audit.txt
          echo >> "$GITHUB_STEP_SUMMARY"
          cat cron_audit.txt >> "$GITHUB_STEP_SUMMARY"

      - name: Failure alert (one-line)
        if: ${{ failure() && env.FAIL_NOTIFY == 'true' }}
        env:
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_TO: ${{ secrets.LINE_TO }}
          USE_BROADCAST: ${{ secrets.USE_BROADCAST }}
          FAIL_NOTIFY: ${{ secrets.FAIL_NOTIFY }}
          STEP_EXPORT: ${{ steps.export.outcome }}
          STEP_SEND: ${{ steps.send.outcome }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          step="unknown"
          if [ "${STEP_EXPORT}" = "failure" ]; then step="export"; fi
          if [ "${STEP_SEND}" = "failure" ]; then step="send"; fi
          ALERT_MESSAGE="⚠️ Morning TimeTree 配信失敗（step=${step}）
          ${RUN_URL}"
          export ALERT_MESSAGE
          python scripts/line_alert.py
